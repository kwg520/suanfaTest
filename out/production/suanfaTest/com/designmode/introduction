一.设计模式
  1.1-结构型模式
     1.1.1 桥接模式
     1.1.2 适配器模式
     1.1.3 装饰器模式
     1.1.4 代理模式

     1.1.5 外观（门面）器模式
     1.1.6 组合模式
     1.1.7 享元模式
  1.2-创建型模式
     1.2.1 建造者模式

     1.2.2 单例模式
     1.2.3 抽象工厂
     1.2.4 工厂方法模式
     1.2.5 原型模式

  1.3-行为型模式
     1.3.1 模版方法模式



     1.3.2 策略模式

             什么是策略模式？
                春节回家我们可以选择步行、骑行、火车、飞机、火箭等等方式；每个出行方式具体实现方式和体验都是有差异的，但是最终我们都可以到家。一句话：殊途同归。
                有了这个例子，我相信你应该对其思想有了一个基本的认识，下面看一下其正式的概念介绍：
                定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换

             优缺点：
             策略模式的优缺点
             优点：算法可以自由切换 避免使用多重条件判断 扩展性良好
             缺点：策略类会增多 所有策略类都需要对外暴露


     1.3.3 观察者模式



     1.3.4 责任链模式
     1.3.5 命令模式
     1.3.6 访问者模式
     1.3.7 迭代器（游标）模式
     1.3.8 备忘录模式
     1.3.9 状态模式
     1.3.10 中介者（调停者）模式
     1.3.11 解释器模式






1、观察者模式(Observer Pattern)
     使用场景：
     BroadCast 监听系统广播或者程序内部自己发送的广播
     EventBus 广播原理一样
     LiveData 数据更新通知观察者
     Adapter 中数据变化时，notifyDataSetChange

2、适配器模式(Adapter Pattern)
 把一个类的接口转换为另一个类期待的接口类型，从而是接口不匹配的两个类兼容工作
 ListView RecycleView使用适配器模式，通过创建适配器，让数据正确的供RecycleView使用


3、代理模式(Proxy Pattern)
 为当前类提供一个代理类给其他类访问，以防止当前类直接暴露出去。
 Activity的管理者是ActivityManager，但最终的管理者为ActivityManagerService(AMS)，在Android7.0及以前版本中，ActivityManager通过调用ActivityManagerProxy进行一些操作，而ActivityManagerProxy会调用AMS，真正的工作是由AMS来完成的。()

4、工厂模式(Factory Pattern)
给外部提供一个统一创建特定对象的类，降低创建对象的复杂性。
Android中的BitmapFactory支持用不同的方式创建Bitmap对象。

5、单例模式(Singleton Pattern)
进程中只创建一个实例。Android8.0以上版本,IActivityManager和IActivityTaskManager实例都是单例，使用了系统的单例实现，不过看源码并没有使用所谓的什么高效的实现方式，直接把锁加到了获取实例的地方：


6、命令模式(Adapter Pattern)
把请求封装成一个对象，从而把不同的客户端参数化。
Handler使用了命令模式，客户端通过sendMessage()发送命令

7、装饰者模式(Decorator Pattern)
动态的给对象添加一些额外的职责
Context体系使用了装饰者，Context是抽象组件，ContextImpl是具体的组件，而ContextWrapper是装饰者，通过扩展ContextWrapper功能，实现Activity、Service等子类

8、责任链模式
一条请求沿着一条链挨个儿传递，直到有对象处理它为止。
Android中UI事件传递使用了责任链模式
OkHttp的拦截器也是使用责任链模式

9、建造者模式(Builder Pattern)
将一个复杂对象的创建和表示分离，使用相同的构建过程创建不同的对象。
AlertDialog使用了建造者模式。